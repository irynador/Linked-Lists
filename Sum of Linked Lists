/* You have two numbers represented by a linked list, where each node contains a single digit.The
digits are stored in reverse order, such that the 1â€™s digit is at the head of the list.Write a function 
that adds the two numbers and returns the sum as a linked list.
EXAMPLE Input: (3 -> 1 -> 5) + (5 -> 9 -> 2)
Output: 8 -> 0 -> 8
*/


    public static LinkedList sumOfLists(LinkedList list1, LinkedList list2){
        if (list1 == null && list2 == null)
            return null;
        LinkedList sum = new LinkedList();
        Node current1 = list1.topElement;
        Node current2 = list2.topElement;
        int result = 0;

        while (current1 != null || current2 != null){
            int foperand = current1 != null ? current1.digit : 0;
            int soperand = current2 != null ? current2.digit : 0;
            result += foperand + soperand;

            sum.addLast(result%10);
            result = result / 10;


            if (current1 != null) current1 = current1.next;
            if (current2 != null) current2 = current2.next;
        }
        return sum;
    }

    public static void main(String[] args) {
        LinkedList list1 = new LinkedList();
        list1.addFirst(2);
        list1.addFirst(9);
        list1.addFirst(5);
        

        LinkedList list2 = new LinkedList();
        list2.addFirst(5);
        list2.addFirst(1);
        list2.addFirst(3);
        list2.addFirst(2);
        list2.addFirst(2);
        list2.addFirst(2);

        System.out.println(list1);
        System.out.println(list2);
        System.out.println(sumOfLists(list1, list2));
    }

