/* Implement an algorithm to delete a node in the middle of a single linked list, given only access to
that node.
EXAMPLE
Input: the node ‘c’ from the linked list a->b->c->d->e
Result: nothing is returned, but the new linked list looks like a->b->d->e
*/


    public void DeleteNode(Node node){
        Node current = topElement;

        while (current.hasNext()) {
            if (current.next == node){
                current.next = node.next;
            } else {
                current = current.next;
            }

        }

    }


    public static void main(String[] args) {
        LinkedList<Integer> list1 = new LinkedList<Integer>();
        list1.addFirst(2);
        list1.addFirst(9);
        list1.addFirst(5);
        list1.addFirst(1);
        list1.addFirst(3);
        list1.addFirst(4);

        LinkedList<String> list2 = new LinkedList<String>();
        list2.addFirst("A");
        list2.addFirst("R");
        list2.addFirst("I");

        System.out.println(list1.toString());
        System.out.println(list2.toString());

        list1.DeleteNode(list1.topElement.next.next);
        System.out.println(list1.toString());

    }
}
