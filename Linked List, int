public class LinkedList {
    private Node topElement;
    private int N;

    class Node {
        private Node next;
        private int digit;

        Node() {
        }

        Node(int digit, Node next) {
            this.digit = digit;
            this.next = next;
        }

        Node getNext() {
            return this.next;
        }

        boolean hasNext() {
            return this.next != null;
        }
    }

    public LinkedList() {
        topElement = null;
        N = 0;
    }

    public LinkedList(int d) {
        Node node = new Node(d, null);
        topElement = node;
        N = 1;
    }

    public void addFirst(int num) {
        Node node = new Node(num, topElement);
        topElement = node;
        N++;
    }

    public void addLast(int num) {
        Node node = new Node(num, null);
        N++;

        Node current = topElement;
        if (current == null) {
            topElement = node;
            return;
        }
        while (current.hasNext()) {
            current = current.next;
        }
        current.next = node;
    }

    public void removeAtIndex(int index) {
        int counter = 0;
        Node current = this.topElement;
        Node prevNode = null;
        while (current.hasNext() && counter < index) {
            if (counter == index - 1) {
                prevNode = current;
            }
            counter++;
            current = current.next;
        }
        if (prevNode != null) {
            prevNode.next = current.next;
        } else {
            topElement = current.next;
        }
        current = null;
    }

    public int getSize() {
        return N;
    }

    public String toString() {
        String result = "";
        Node current = topElement;
        while (current.hasNext()) {
            result += current.digit;
            current = current.next;
        }
        result += current.digit;
        return result;
    }
