/* Given a circular linked list, implement an algorithm which returns node at the beginning of the loop.
DEFINITION Circular linked list: A (corrupt) linked list in which a nodeâ€™s next pointer points 
to an earlier node, so as to make a loop in the linked list.
EXAMPLE
input: A -> B -> C -> D -> E -> C [the same C as earlier]
output: C
*/


   public Item returnLoopStartNode() {
        Node slow = topElement;
        Node fast = topElement;

        if (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
        } else {
            return null;
        }
        slow = slow.next;

        while(slow != fast) {
            slow = slow.next;
            if (fast.next != null && fast.next.next != null) {
                fast = fast.next.next;
            } else {
                return null;
            }
        }
        slow = topElement;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        return slow.digit;
   }

   
    public void createLoopByIndex(int index) {
        int counter = 0;
        Node current = topElement;
        Node circleNode = null;
        while (current.next != null) {
            if (counter == index) {
                circleNode = current;
            }
            current = current.next;
            counter++;
        }
        current.next = circleNode;
    }


   
    public static void main(String[] args) {
        LinkedList<Integer> list1 = new LinkedList<Integer>();
        list1.addFirst(2);
        list1.addFirst(9);
        list1.addFirst(5);
        list1.addFirst(1);
        list1.addFirst(3);
        list1.addFirst(4);


        LinkedList<String> list2 = new LinkedList<String>();
        list2.addFirst("C");
        list2.addFirst("E");
        list2.addFirst("D");
        list2.addFirst("C");
        list2.addFirst("B");
        list2.addFirst("A");


        System.out.println(list1);
        System.out.println(list2);

        list2.createLoopByIndex(4);

        System.out.println(list2.returnLoopStartNode());
        




    }

